<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[iBlock的博客]]></title>
  <link href="http://iBlock.github.io/atom.xml" rel="self"/>
  <link href="http://iBlock.github.io/"/>
  <updated>2016-01-23T16:18:21+08:00</updated>
  <id>http://iBlock.github.io/</id>
  <author>
    <name><![CDATA[iBlock]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[React-Native环境搭建]]></title>
    <link href="http://iBlock.github.io/blog/2016/01/18/react-native-huan-jing-da-jian/"/>
    <updated>2016-01-18T21:40:05+08:00</updated>
    <id>http://iBlock.github.io/blog/2016/01/18/react-native-huan-jing-da-jian</id>
    <content type="html"><![CDATA[<p><img src="http://iBlock.github.io/images/2016/01/18/ReactNative.png" title="ReactNative" alt="alt text" /></p>

<h2>前言</h2>

<p>最近领导让我们做一个H5与Native交互的方案，他最初的要求其实很简单，只要能在H5调起我们终端的支付功能进行支付就行。我的想法就是基于webView做一个URL拦截处理，与服务端协商好事件类型，如1是支付，2是弹窗，对URL中的类型与参数进行处理即可，当然这种做法比较low，不过可以很快完成需求。然后基于这个需求我搜了下目前网上的一些方案，发现了本文的主题，由facebook开源的React-Native框架，这个框架允许你使用 JavaScript 开发原生的 iOS 应用，同时也支持Android。</p>

<!--more-->


<h2>安装步骤</h2>

<ul>
<li><h3>安装Node版本管理器-> NVM</h3></li>
</ul>


<h4>1、首先进入.git目录下，该目录在/User/当前用户目录下，需要打开隐藏文件权限。如果没有该目录，则先创建该目录</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git init</span></code></pre></td></tr></table></div></figure>


<h4>2、从git仓库中clone工程到本地</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/cnpm/nvm.git</span></code></pre></td></tr></table></div></figure>


<h4>3、在终端中输入命令nvm，这时会发现提示如下</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-bash: nvm: command not found</span></code></pre></td></tr></table></div></figure>


<h4>4、上述的错误是提示nvm命令找不到，可以通过以下命令指定nvm路径</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source ~/.nvm/nvm.sh</span></code></pre></td></tr></table></div></figure>


<p>这时重新在终端输入nvm，会显示一些nvm的命令帮助，证明nvm已经能找到并使用。但是使用这种方式仅在本次生效，也就是说当把终端关闭再次打开时，再输入nvm又会发现命令找不到了。为避免每次都要指明nvm.sh的位置可以为命令终端添加启动配置。打开终端输入以下命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>open -e !$</span></code></pre></td></tr></table></div></figure>


<p>将会打开profile文件，添加</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export NVM_DIR="$HOME/.nvm"
</span><span class='line'>[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" # This loads nvm</span></code></pre></td></tr></table></div></figure>


<ul>
<li><h3>安装Node</h3></li>
</ul>


<h4>1、在终端输入以下命令等待执行完成即可完成Node安装</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nvm install node && nvm alias default node</span></code></pre></td></tr></table></div></figure>


<h4>2、查看下Node是否生效，输入node -v，如果能显示版本号则正常</h4>

<ul>
<li><h3>使用 homebrew 安装 watchman，一个来自Facebook 的观察程序以及类型检查程序：</h3></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install watchman
</span><span class='line'>brew install flow</span></code></pre></td></tr></table></div></figure>


<p>通过配置 watchman，React 实现了在代码发生变化时，完成相关的重建的功能。就像在使用 Xcode 时，每次保存文件都会进行一次创建。</p>

<ul>
<li><h3>安装 React-Native</h3></li>
</ul>


<p>通过 npm安装即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g react-native-cli</span></code></pre></td></tr></table></div></figure>


<ul>
<li><h3>初始化一个ReactNative的项目</h3></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>react-native init myFirstReactNativeProject</span></code></pre></td></tr></table></div></figure>


<ul>
<li><h3>运行ReactNative项目</h3></li>
</ul>


<h4>1、cd myFirstReactNativeProject</h4>

<h4>2、用xcode打开myFirstReactNativeProject.xcodeproj并点击Run按钮</h4>

<h4>3、用你喜欢的文本编辑器打开index.ios.js并随便改上几行</h4>

<h4>4、在iOS Emulator中按下⌘-R就可以刷新APP并看到你的最新修改</h4>

<p>恭喜！现在你已经成功运行并修改了你的第一个React Native应用！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress使用过程中出现的问题]]></title>
    <link href="http://iBlock.github.io/blog/2014/10/08/octopressshi-yong-guo-cheng-zhong-chu-xian-de-wen-ti/"/>
    <updated>2014-10-08T22:34:04+08:00</updated>
    <id>http://iBlock.github.io/blog/2014/10/08/octopressshi-yong-guo-cheng-zhong-chu-xian-de-wen-ti</id>
    <content type="html"><![CDATA[<p>好久没写博客了，想要记录一下最近学习的一些东西，熟练的进到octopress目录下敲入rake preview，直接就报错了，根据错误提示重新bundle update一下就好了。再次敲入rake preview命令，命令没有报错，然后我在safari中输入 <a href="http://127.0.0.1:4000/">http://127.0.0.1:4000/</a> 进行查看，又出现一个麻烦事，整个页面显示空白，不知什么原因，只能请教google大神了，好在查找的第一条记录就找到问题的解决方案了，找到octopress目录下的Gemfile文件，在最后加上</p>

<pre><code>gem 'thin'
</code></pre>

<p>保存文件，在命令行输入bundle update，再次打开地址发现一切正常了，可以开始写博客了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MailCore2邮件类库底层实现分析]]></title>
    <link href="http://iBlock.github.io/blog/2014/04/17/mailcore2you-jian-lei-ku-di-ceng-shi-xian-fen-xi/"/>
    <updated>2014-04-17T11:58:15+08:00</updated>
    <id>http://iBlock.github.io/blog/2014/04/17/mailcore2you-jian-lei-ku-di-ceng-shi-xian-fen-xi</id>
    <content type="html"><![CDATA[<h2>MailCore2邮件库概述</h2>

<p>MailCore是一个Mac和iOS下的email库。使用它能轻易发送email，支持SMTP, IMAP, POP3以及RFC822。现在，来自Sparrow和MailCore 1.0的开发者们打造了新的MailCore&mdash;MailCore 2!</p>

<p>具体功能如下：</p>

<ul>
<li>POP, IMAP, and SMTP support</li>
<li>RFC822 parser and generator</li>
<li>UI widgets for rendering HTML messages</li>
<li>Asynchronous APIs with Objective-C blocks</li>
<li>iOS and Mac support</li>
<li>Portable core engine in C++</li>
</ul>


<!--more-->


<h2>MailCore2邮件库主体</h2>

<p><img src="http://iBlock.github.io/images/2014/04/17/MailCore2.png" title="MailCore2" alt="alt text" /></p>

<p>从上图可以看出，LibEtPan这个库才是最核心的库，所有邮件的相关实现功能都是在该库下实现的，MailCore2是C++和Objective-C的混合项目，它先是用C++对底层的LibEtPan作了相对较全面的面向对象封装，这部分C++的封装与LibEtPan一样可以用于Linux和Windows平台上的应用，然后再通过Objective-C继续对C++的这一层进行抽象、封装后供Mac和IOS应用使用。</p>

<h2>LibEtPan</h2>

<h3>LibEtPan分析</h3>

<h4>概述</h4>

<p>LibEtPan是一个处理对邮箱的各种访问需求的库，这个库对IMAP、POP3、SMTP、MBOX、MH等都有良好支持。它采用C语言编写，但可以方便地在C++环境下编译，它是一个跨平台的库，主要运行在MAC、UNIX平台上，这个库在非Windows平台上的表现应该会比Windows平台上要好。
使用这个库有两种方式：</p>

<ul>
<li>直接使用底层的函数，这样访问不同的对象时接口也不完全一样，但是代码非常直接，容易读。</li>
<li>通过IMAP、POP3等各自的driver使用上层封装好了的函数，通过函数指针的形式使得各种方式下的访问接口是一样的，灵活性很高，但是代码读起来就不那么直接了。另外，LibEtPan的上层封装集成了自己实现的缓存和多线程功能。</li>
</ul>


<p>这个库对相关邮件规范的支持情况如下：</p>

<ul>
<li>IMAP  <br/>
LibEtPan实现了RFC 2060 VERSION 4rev1定义了的每一条指令。</li>
<li>POP3  <br/>
RFC 1939 以及 RFC2449 规定的每一个指令，LibEtPan都进行了实现。RFC 1734 的POP3 认证指令没有实现。</li>
<li>SMTP  <br/>
RFC 2821 和 RFC 1891 规定的每一条指令LibetPan都进行了实现。</li>
</ul>


<p>LibetPan对其源代码文件进行了规范和一致的命名，并且保证每个源代码文件的内容与其名字所提示的作用一致，结合其对IMAP的实现，具体而言：</p>

<ul>
<li>mailimap.[ch] <br/>
包括实现IMAP相关 RFC 指令的代码。</li>
<li>mailimap_helper.[ch]  <br/>
为上述函数提供的helper接口。</li>
<li>mailmap_types.[ch]<br/>
包括IMAP实现所需要的类型以及类型的构建函数。</li>
<li>mailimap_types_helper.[ch]<br/>
该文件包含一组函数，用来创建使用 IMAP 实现模块时所必须的数据。</li>
<li>mailimap_socket.[ch]  <br/>
包含通过 TCP 连接 IMAP 服务器的功能相关的函数。</li>
<li>mailimap_ssl.[ch] <br/>
提供了通过 TLS 层连接 IMAP 服务器的函数。</li>
</ul>


<h4>LibEtPan结构说明</h4>

<blockquote><p>库 libetpan 的内容庞大,从对邮件的支持上看,从通过 Socket 建立到服务器 的 TCP 连接、到解析邮件的每个字符、到对各种格式和协议的处理,直至针对客 户端应用的封装,libetpan 都做了周到的工作;从对库的封装上看,它不仅提供 了需求对应的功能,还按基础功能->会话->存储这样三个层次对整个库进行了设 计和封装,使得逻辑清晰,有助于调用方的理解和使用。其中,基础功能层以底 层 C 函数的形式提供了对各邮件协议的具体支持;会话层对底层封装了对远程邮 件服务器或者本地文件系统的连接并且维护相关的会话,对上层则利用对底层连 接的封装,按上层(存储/文件夹层)的功能的需要,提供了相应的函数,使得 上层不必考虑连接、会话方面的内容;存储/文件夹层一方面从应用层取得认证 信息并传递到会话层由其自动获取和维护连接,另外则专注于实现邮件存储、文 件夹部分的业务逻辑。</p></blockquote>


<p>这个库的完整架构基本是下图这样子,从上到下依次可划分为应用层、存储/文件夹层、会话层、邮件协议支持、 邮件格式支持这样几个层次,通过专门设计的数据结构、函数指针等把各层关联了起来：</p>

<p><img src="http://iBlock.github.io/images/2014/04/17/LibEtPan.png" title="LibEtPan" alt="alt text" /></p>

<p>对应上图中的各层,libetpan 分别对存储/文件夹、会话和邮件提供了统称为 driver 的封装工具,隐藏了底层细节,供上层调用。</p>

<h3>LibEtPan库各部分功能说明</h3>

<h4>IMF/MIME</h4>

<p>IMF：Internet Message Format <br/>
MIME：Multipurpose Internet Mail Extensions</p>

<p>库 libetpan 通过这 2 个模块实现了对邮件中从小到具体字符、大到邮件结构数据的解析,libetpan 还使用这里定义的各种数据结构来封装邮件各部分的数据</p>

<ul>
<li>IMF部分源代码作用说明<br/>
<img src="http://iBlock.github.io/images/2014/04/17/IMF.png" title="IMF" alt="alt text" /></li>
<li>MIME部分源代码作用说明
<img src="http://iBlock.github.io/images/2014/04/17/MIME.png" title="MIME" alt="alt text" /></li>
</ul>


<p>libetpan 在取得例如邮件内容这样的文本时,内部进行了良好的缓冲、数据 流处理,从而能够稳定地处理例如邮件内容这样的大数据,避免突然占用大量内 存等引起的异常情况的发生,下面以通过 pop3 方式获取邮件内容功能的实现予以说明:</p>

<blockquote><p>在最底层(mailstream_socket.c)通过系统提供的 read 函数读取在socket 通信 的响应,这部分的工作是 OS 完成的,libetpan 只是调用了这个函数把 socket 请 求的响应读到一个 char*中,这个内容然后被放到 mailstream 的 char * read_buffer 成员中,然后在 mailstream.c 中一边把 read_buffer 中的内容直接内存拷贝到 MMAPString *中,一边把新读取到的内容调整、填充到 read_buffer,最后把响 应结果放到了 mailpop3*的 MMAPString * pop3_response_buffer 成员中。在从 mailpop3*中实际获取邮件内容时,也是先把内容逐步读取到一个MMAPString*, 最后在真正需要的时候才读取到 char*中。至于MMAPString,它的实现包含了大量对内存的操作和系统调用,从使用的角度,可以不用深入考虑其细节,只要把它当作一个数据不断增加时容量能自 动增加的字符串即可。</p></blockquote>


<h4>对邮件协议的支持</h4>

<ul>
<li>IMAP  <br/>
主要的相关文件及其作用参见 2.1.1 节的说明。
核心数据结构总共有 3 个结构体:mailimap、imap_mailstorage 以及imap_mailstorage_driver。
Mailimap 定义在在 imapdriver_types.h 中,它的主要成员是关于操作请求的响应、认证和查询当前进度的函数指针这三类：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">struct</span> <span class="n">mailimap</span> <span class="p">{</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">imap_response</span><span class="p">;</span>
</span><span class='line'><span class="cm">/* internals */</span>
</span><span class='line'><span class="n">mailstream</span> <span class="o">*</span> <span class="n">imap_stream</span><span class="p">;</span>
</span><span class='line'><span class="n">size_t</span> <span class="n">imap_progr_rate</span><span class="p">;</span>
</span><span class='line'><span class="n">progress_function</span> <span class="o">*</span> <span class="n">imap_progr_fun</span><span class="p">;</span>
</span><span class='line'><span class="n">MMAPString</span> <span class="o">*</span> <span class="n">imap_stream_buffer</span><span class="p">;</span>
</span><span class='line'><span class="n">MMAPString</span> <span class="o">*</span> <span class="n">imap_response_buffer</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">imap_state</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">imap_tag</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">mailimap_connection_info</span> <span class="o">*</span> <span class="n">imap_connection_info</span><span class="p">;</span>    
</span><span class='line'><span class="k">struct</span> <span class="n">mailimap_selection_info</span> <span class="o">*</span> <span class="n">imap_selection_info</span><span class="p">;</span>  
</span><span class='line'><span class="k">struct</span> <span class="n">mailimap_response_info</span> <span class="o">*</span> <span class="n">imap_response_info</span><span class="p">;</span>    
</span><span class='line'><span class="k">struct</span> <span class="p">{</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span> <span class="n">sasl_conn</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">sasl_server_fqdn</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">sasl_login</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">sasl_auth_name</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">sasl_password</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">sasl_realm</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span> <span class="n">sasl_secret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">imap_sasl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">time_t</span> <span class="n">imap_idle_timestamp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">time_t</span> <span class="n">imap_idle_maxdelay</span><span class="p">;</span>
</span><span class='line'><span class="n">mailprogress_function</span> <span class="o">*</span> <span class="n">imap_body_progress_fun</span><span class="p">;</span> <span class="n">mailprogress_function</span> <span class="o">*</span> <span class="n">imap_items_progress_fun</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span> <span class="n">imap_progress_context</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>imap_mailstorage 在 imapdriver_types.h 中定义了连接 IMAP 服务器的过程中 认证过程需要的数据：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">struct</span> <span class="n">imap_mailstorage</span> <span class="p">{</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">imap_servername</span><span class="p">;</span>
</span><span class='line'><span class="n">uint16_t</span> <span class="n">imap_port</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">imap_command</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">imap_connection_type</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">imap_auth_type</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">imap_login</span><span class="p">;</span> <span class="cm">/* deprecated */</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">imap_password</span><span class="p">;</span> <span class="cm">/* deprecated */</span>
</span><span class='line'><span class="kt">int</span> <span class="n">imap_cached</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">imap_cache_directory</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="p">{</span>
</span><span class='line'><span class="kt">int</span> <span class="n">sasl_enabled</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">sasl_auth_type</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">sasl_server_fqdn</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">sasl_local_ip_port</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">sasl_remote_ip_port</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">sasl_login</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">sasl_auth_name</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">sasl_password</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">sasl_realm</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">imap_sasl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">imap_local_address</span><span class="p">;</span>
</span><span class='line'><span class="n">uint16_t</span> <span class="n">imap_local_port</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>imap_mailstorage_driver 在 imapstorage.c 中定义了符合统一接口 mailstorage_driver 的要求的一组函数指针：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">static</span> <span class="n">mailstorage_driver</span> <span class="n">imap_mailstorage_driver</span> <span class="o">=</span> <span class="p">{</span><span class="err">￼</span>
</span><span class='line'><span class="cm">/* sto_name */</span> <span class="s">&quot;imap&quot;</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sto_connect */</span> <span class="n">imap_mailstorage_connect</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sto_get_folder_session */</span><span class="n">imap_mailstorage_get_folder_session</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sto_uninitialize */</span> <span class="n">imap_mailstorage_uninitialize</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>POP3</li>
</ul>


<p><img src="http://iBlock.github.io/images/2014/04/17/POP3.png" title="POP3" alt="alt text" /></p>

<p>主要的数据结构如下,它的主要成员包括用户认证、对操作请求的响应和结 果的封装两类：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">struct</span> <span class="n">mailpop3</span> <span class="p">{</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">pop3_response</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">pop3_timestamp</span><span class="p">;</span>
</span><span class='line'><span class="cm">/* internals */</span>
</span><span class='line'><span class="n">mailstream</span> <span class="o">*</span> <span class="n">pop3_stream</span><span class="p">;</span>
</span><span class='line'><span class="n">size_t</span> <span class="n">pop3_progr_rate</span><span class="p">;</span>
</span><span class='line'><span class="n">progress_function</span> <span class="o">*</span> <span class="n">pop3_progr_fun</span><span class="p">;</span>
</span><span class='line'><span class="n">MMAPString</span> <span class="o">*</span> <span class="n">pop3_stream_buffer</span><span class="p">;</span>
</span><span class='line'><span class="n">MMAPString</span> <span class="o">*</span> <span class="n">pop3_response_buffer</span><span class="p">;</span>
</span><span class='line'><span class="n">carray</span> <span class="o">*</span> <span class="n">pop3_msg_tab</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">pop3_state</span><span class="p">;</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">pop3_deleted_count</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="p">{</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span> <span class="n">sasl_conn</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">sasl_server_fqdn</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">sasl_login</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">sasl_auth_name</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">sasl_password</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">sasl_realm</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span> <span class="n">sasl_secret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">pop3_sasl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>SMTP</li>
</ul>


<p><img src="http://iBlock.github.io/images/2014/04/17/SMTP.png" title="SMTP" alt="alt text" /></p>

<p>除了公共的数据结构 mailstream 外,对 SMTP 的支持基本上只使用了下面的数据结构：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">struct</span> <span class="n">mailsmtp</span> <span class="p">{</span>
</span><span class='line'><span class="n">mailstream</span> <span class="o">*</span> <span class="n">stream</span><span class="p">;</span>
</span><span class='line'><span class="n">size_t</span> <span class="n">progr_rate</span><span class="p">;</span>
</span><span class='line'><span class="n">progress_function</span> <span class="o">*</span> <span class="n">progr_fun</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">response</span><span class="p">;</span>
</span><span class='line'><span class="n">MMAPString</span> <span class="o">*</span> <span class="n">line_buffer</span><span class="p">;</span>
</span><span class='line'><span class="n">MMAPString</span> <span class="o">*</span> <span class="n">response_buffer</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">esmtp</span><span class="p">;</span> <span class="cm">/* contains flags MAILSMTP_ESMTP_* */</span>
</span><span class='line'><span class="kt">int</span> <span class="n">auth</span><span class="p">;</span> <span class="cm">/* contains flags MAILSMTP_AUTH_* */</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="p">{</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span> <span class="n">sasl_conn</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">sasl_server_fqdn</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">sasl_login</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">sasl_auth_name</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">sasl_password</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">sasl_realm</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span> <span class="n">sasl_secret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">smtp_sasl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">size_t</span> <span class="n">smtp_max_msg_size</span><span class="p">;</span>
</span><span class='line'><span class="n">mailprogress_function</span> <span class="o">*</span> <span class="n">smtp_progress_fun</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span> <span class="n">smtp_progress_context</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">response_code</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>发送邮件的响应,由 mailstream.c 负责读取并读取的结果存储进 MMAPString * line_buffer。</p>

<h4>会话层</h4>

<p>libetpan 主要针对 IMAP、POP3、NNTP、MH、FEED、MBOX 提供了会话及对 其操作的封装(称为 driver)的支持,我们大量使用的只有对 IMAP 的部分。</p>

<p>会话层可以访问本地文件系统或者远程邮件服务器,可以通过它直接发送邮 件操作命令到邮件服务器,邮件存储使用会话与服务器通信;邮件文件夹也使用 会话从服务器获取信息或者向服务器发送信息,按具体实现的不同,整个过程中 可以使用统一会话,也可以使用不同的会话。</p>

<p>会话在 libetpan 中使用结构体 mailsession 来表示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">struct</span> <span class="n">mailsession</span> <span class="p">{</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span> <span class="n">sess_data</span><span class="p">;</span>
</span><span class='line'><span class="n">mailsession_driver</span> <span class="o">*</span> <span class="n">sess_driver</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>一个会话有一个 driver,driver 中的内容具体封装了会话相关的操作,driver 提供的信息包括：</p>

<ul>
<li>name:driver 的名字</li>
<li>initialize():调用mailsession_new()创建会话时会调用这个函数,它会创建一个特定于 driver 的数据结构并存储在会话中,这个数据结果对于不同的实现(例如 IMAP、NNTP 等)具体内容不同,也作为会话状态使用。</li>
<li>uninitialize():释放调用 initialize()时创建的数据结构。</li>
<li>parameters():实现特定于给定邮件访问的函数。</li>
<li>connect_stream():把数据流连接到会话。</li>
<li>connect_path():通知主路径到会话。</li>
<li>starttls():把当前流转换一个 TLS 流。</li>
<li>login():使用用户名和密码来认证会话。</li>
<li>logout():退出会话并且关闭流。</li>
<li>noop():不作任何操作,但不断轮询到服务器的连接的状态,相当于心跳保持。</li>
<li>check_folder():通过向服务器发送一些指令的方式来对会话做一次检查。</li>
<li>select_folder():选择一个邮件文件夹(mailbox)。</li>
<li>expunge_folder():删除所有标记为\Deleted 的邮件。</li>
<li>status_folder():查询文件夹的状态(包括邮件总数、最近的邮件数、未读的邮件数)。</li>
<li>append_message():把一个符合 RFC 2822 要求的邮件加入到当前文件夹。</li>
<li>get_messages_list():返回当前文件夹中所有邮件的列表。</li>
<li>get_envelopes_list():取得解析了的 envelope 字段。</li>
<li>remove_message():彻底删除当前文件夹中给定的邮件。</li>
<li>get_message:以 mailmessage 结构体的形式返回给定序号的邮件。</li>
</ul>


<p>在 IMAP 的情况下就是一个例子,相应的 driver 的创建或者构造其实很简单, 直接使用函数指针进行结构体赋值,这样就把一组与会话相关的函数通过一个结 构体封装了起来,从而可以用相同的代码调用,间接实现了 CPP Template 的效果, 而且在接下来可以直接通过相应的变量去使用：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">static</span> <span class="n">mailsession_driver</span> <span class="n">local_imap_session_driver</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'><span class="cm">/* sess_name */</span> <span class="s">&quot;imap&quot;</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_initialize */</span> <span class="n">imapdriver_initialize</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_uninitialize */</span> <span class="n">imapdriver_uninitialize</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_parameters */</span> <span class="n">imapdriver_parameters</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_connect_stream */</span> <span class="n">imapdriver_connect_stream</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_connect_path */</span> <span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_starttls */</span> <span class="n">imapdriver_starttls</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_login */</span> <span class="n">imapdriver_login</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_logout */</span> <span class="n">imapdriver_logout</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_noop */</span> <span class="n">imapdriver_noop</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_build_folder_name */</span><span class="n">imapdriver_build_folder_name</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_create_folder */</span> <span class="n">imapdriver_create_folder</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_delete_folder */</span> <span class="n">imapdriver_delete_folder</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_rename_folder */</span> <span class="n">imapdriver_rename_folder</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_check_folder */</span> <span class="n">imapdriver_check_folder</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_examine_folder */</span> <span class="n">imapdriver_examine_folder</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_select_folder */</span> <span class="n">imapdriver_select_folder</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_expunge_folder */</span> <span class="n">imapdriver_expunge_folder</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_status_folder */</span> <span class="n">imapdriver_status_folder</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_messages_number */</span> <span class="n">imapdriver_messages_number</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_recent_number */</span> <span class="n">imapdriver_recent_number</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_unseen_number */</span> <span class="n">imapdriver_unseen_number</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_list_folders */</span> <span class="n">imapdriver_list_folders</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_lsub_folders */</span> <span class="n">imapdriver_lsub_folders</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_subscribe_folder */</span> <span class="n">imapdriver_subscribe_folder</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_unsubscribe_folder */</span><span class="n">imapdriver_unsubscribe_folder</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_append_message */</span> <span class="n">imapdriver_append_message</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_append_message_flags */</span> <span class="n">imapdriver_append_message_flags</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_copy_message */</span> <span class="n">imapdriver_copy_message</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_move_message */</span> <span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_get_message */</span> <span class="n">imapdriver_get_message</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_get_message_by_uid */</span><span class="n">imapdriver_get_message_by_uid</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_get_messages_list */</span><span class="n">imapdriver_get_messages_list</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_get_envelopes_list */</span><span class="n">imapdriver_get_envelopes_list</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_remove_message */</span> <span class="n">imapdriver_remove_message</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* sess_login_sasl */</span> <span class="n">imapdriver_login_sasl</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>libetpan 对具体的邮件使用下面的结构体封装,除了包含邮件本身的消息外, 对于具体的 mailmessage 实例可以获取相应的会话,还可以获取对邮件的处理的 driver：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">struct</span> <span class="n">mailmessage</span> <span class="p">{</span>
</span><span class='line'><span class="n">mailsession</span> <span class="o">*</span> <span class="n">msg_session</span><span class="p">;</span>
</span><span class='line'><span class="n">mailmessage_driver</span> <span class="o">*</span> <span class="n">msg_driver</span><span class="p">;</span>
</span><span class='line'><span class="n">uint32_t</span> <span class="n">msg_index</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">msg_uid</span><span class="p">;</span>
</span><span class='line'><span class="n">size_t</span> <span class="n">msg_size</span><span class="p">;</span>
</span><span class='line'><span class="c1">// export internal_date; add by liam</span>
</span><span class='line'><span class="k">struct</span> <span class="n">mailimap_date_time</span> <span class="o">*</span> <span class="n">internal_date</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">mailimf_fields</span> <span class="o">*</span> <span class="n">msg_fields</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">mail_flags</span> <span class="o">*</span> <span class="n">msg_flags</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">msg_resolved</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">mailimf_single_fields</span> <span class="n">msg_single_fields</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">mailmime</span> <span class="o">*</span> <span class="n">msg_mime</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* internal data */</span>
</span><span class='line'><span class="kt">int</span> <span class="n">msg_cached</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span> <span class="n">msg_data</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">msg_folder field :</span>
</span><span class='line'><span class="cm">used to reference the mailfolder, this is a workaround due to the problem with initial conception, where folder notion did not exist.</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span> <span class="n">msg_folder</span><span class="p">;</span>
</span><span class='line'><span class="cm">/* user data */</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span> <span class="n">msg_user_data</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过会话,可以取得邮件,libetpan 使用结构体 mailmessage 表示一封邮件。 与对会话的处理相似,在处理邮件时,libetpan 使用了类似的方式:通过 mailmessage_driver 提供了一组操作邮件内容的函数,具体包括(一个邮件可以 包含数量不限的 MIME 部分,MIME 之间可嵌套,每个 MIME 包含消息头和消息 体两部分)：</p>

<ul>
<li>name:driver 的名字</li>
<li>initialize():创建以-分割的邮件 uid 并保存在 mailmessage*中,在调用mailmessage_init()时会调用这个方法。</li>
<li>uninitialize():释放 initialize()方法创建的数据,mailmessage_free()会调用这个方法。</li>
<li>flush():从内存中释放所有临时的邮件结构体,例如 MIME 消息的结构体。</li>
<li>fetch_result_free():释放所有以 fetch 开头的方法返回的字符串。</li>
<li>fetch():返回邮件的内容,包括头、文本。</li>
<li>fetch_header():返回 header 部分的内容。</li>
<li>fetch_body():返回邮件的不包含 header 部分内容的正文。</li>
<li>fetch_size():取得邮件的大小。</li>
<li>get_bodystructure():取得邮件的 MIME 结构信息,就是通常说的bodystructure 的内容。</li>
<li>fetch_section():取得给定的 MIME 部分的内容。</li>
<li>fetch_section_header():返回给定 MIME 部分的消息的消息头。</li>
<li>fetch_section_mime():返回给定 MIME 部分的 MIME 头。</li>
<li>fetch_section_body():返回给定 MIME 部分文本,对一个 MIME 消息则返回不包含头的消息内容。</li>
<li>fetch_envelope():返回一个 mailimf_fields 结构体,其中包含一组有相应driver 选取的 mailimf_field;mailimf_field 是一个结构体,其中包含有一个公用体,通过 int 类型的 fld_type 指明了公用体的实际内容。</li>
<li>get_flags():返回一个与该邮件有关的标志。在直接使用 message->flags获取标志前须确保调用了这个方法。</li>
</ul>


<p>mailmessage_driver 也通过结构体封装了这些函数的指针:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">static</span> <span class="n">mailmessage_driver</span> <span class="n">local_imap_message_driver</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'><span class="cm">/* msg_name */</span> <span class="s">&quot;imap&quot;</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* msg_initialize */</span> <span class="n">imap_initialize</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* msg_uninitialize */</span> <span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* msg_flush */</span> <span class="n">imap_flush</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* msg_check */</span> <span class="n">imap_check</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* msg_fetch_result_free */</span> <span class="n">imap_fetch_result_free</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* msg_fetch */</span> <span class="n">imap_fetch</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* msg_fetch_header */</span> <span class="n">imap_fetch_header</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* msg_fetch_body */</span> <span class="n">imap_fetch_body</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* msg_fetch_size */</span> <span class="n">imap_fetch_size</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* msg_get_bodystructure */</span> <span class="n">imap_get_bodystructure</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* msg_fetch_section */</span> <span class="n">imap_fetch_section</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* msg_fetch_section_header */</span><span class="n">imap_fetch_section_header</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* msg_fetch_section_mime */</span> <span class="n">imap_fetch_section_mime</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* msg_fetch_section_body */</span> <span class="n">imap_fetch_section_body</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* msg_fetch_envelope */</span> <span class="n">imap_fetch_envelope</span><span class="p">,</span>
</span><span class='line'><span class="cm">/* msg_get_flags */</span> <span class="n">imap_get_flags</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h4>邮件存储/文件夹层</h4>

<p>一个邮件存储(结构体 mailstorage)实例代表一个邮件服务器或者一个主路径,它实际上可以是一个 IMAP 服务器,一个 MH 或 mbox 文件的根路径。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">struct</span> <span class="n">mailstorage</span> <span class="p">{</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">sto_id</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span> <span class="n">sto_data</span><span class="p">;</span>
</span><span class='line'><span class="n">mailsession</span> <span class="o">*</span> <span class="n">sto_session</span><span class="p">;</span>
</span><span class='line'><span class="n">mailstorage_driver</span> <span class="o">*</span> <span class="n">sto_driver</span><span class="p">;</span>
</span><span class='line'><span class="n">clist</span> <span class="o">*</span> <span class="n">sto_shared_folders</span><span class="p">;</span> <span class="cm">/* list of (struct mailfolder *) */</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span> <span class="n">sto_user_data</span><span class="p">;</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>获得邮件存储实例后,可以根据它在服务器上创建一个文件夹(通过结构体 mailfolder 表示),文件夹通常还被称作 mailbox,也就是收件箱、发件箱、草稿 箱等,这个文件夹可以是主路径的子文件夹,通过它可以执行对文件夹有关的操 作。</p>

<p>对 IMAP 而言,文件夹是 IMAP 的 mailbox,对 MH 而言是 MH 存储的其中一 个文件夹,对 MBOX 而言,只有一个文件夹,也就是 MBOX 文件。</p>

<p>从业务逻辑上看,mailbox 像是一个房子,但是房子里面可以有数量不定的 房间,在 libetpan 内部,房间就是 mailfolder,但在具体的技术实现上,mailbox 和 mail folder 都统一为 mail folder,用一个结构体表示,该结构体可嵌套,从而 支持 mailbox 和 mail folder 之间的逻辑关系。</p>

<p>文件夹的具体定义如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">struct</span> <span class="n">mailfolder</span> <span class="p">{</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">fld_pathname</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">fld_virtual_name</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">mailstorage</span> <span class="o">*</span> <span class="n">fld_storage</span><span class="p">;</span>
</span><span class='line'><span class="n">mailsession</span> <span class="o">*</span> <span class="n">fld_session</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">fld_shared_session</span><span class="p">;</span>
</span><span class='line'><span class="n">clistiter</span> <span class="o">*</span> <span class="n">fld_pos</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">mailfolder</span> <span class="o">*</span> <span class="n">fld_parent</span><span class="p">;</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">fld_sibling_index</span><span class="p">;</span>
</span><span class='line'><span class="n">carray</span> <span class="o">*</span> <span class="n">fld_children</span><span class="p">;</span> <span class="cm">/* array of (struct mailfolder *) */</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span> <span class="n">fld_user_data</span><span class="p">;</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>libetpan 对访问邮件的需求提供了三个 driver,上面说明了用于会话和邮件 的 2 个 driver,还有一个用于访问存储/文件夹,访问文件夹是仅需要使用会话的 driver。结构体 mailstorage_driver 定义了 libetpan 在存储/文件夹的访问上支持的 操作,它的定义如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">struct</span> <span class="n">mailstorage_driver</span> <span class="p">{</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">sto_name</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="p">(</span><span class="o">*</span> <span class="n">sto_connect</span><span class="p">)(</span><span class="k">struct</span> <span class="n">mailstorage</span> <span class="o">*</span> <span class="n">storage</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="p">(</span><span class="o">*</span> <span class="n">sto_get_folder_session</span><span class="p">)(</span><span class="k">struct</span> <span class="n">mailstorage</span> <span class="o">*</span> <span class="n">storage</span><span class="p">,</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">pathname</span><span class="p">,</span> <span class="n">mailsession</span> <span class="o">**</span> <span class="n">result</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="p">(</span><span class="o">*</span> <span class="n">sto_uninitialize</span><span class="p">)(</span><span class="k">struct</span> <span class="n">mailstorage</span> <span class="o">*</span> <span class="n">storage</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中:</p>

<ul>
<li>name 是 driver 的名字</li>
<li>connect()方法把存储连接到远程服务器或者本地文件系统的路径</li>
<li>get_folder_session()方法有两种行为:1)创建一个新的会话并且使之独立于存储使用的会话,然后选择给定的邮箱;2)选择当前存储的会话及其特定的邮箱。</li>
<li>uninitialized()方法释放构造 mailstorage 时创建的数据。</li>
</ul>


<p>在 IMAP、POP3 等操作环境下,mailstorage_driver 会分别被实例化为 imap_mailstorage_driver 和 pop3_mailstorage_driver。</p>

<h4>数据库、缓存文件</h4>

<p>libetpan 支持把邮件数据存储到 Berkeley DB 里,如果要使用这个数据库,需 要在编译时进行相应的配置,而且对数据库的支持目前仅限于*nix、Mac 平台。</p>

<p>直接在 libetpan 把邮件数据保存到数据库中,这样做的运行效率会比 sqlite 要高不少,但势必要把一些业务逻辑上的东西带入到 libetpan 中,而且要比通过 Objective C 操作 sqlite 的开发及调优的难度会有一定的增加。</p>

<p>libetpan 的缓存实际就是文件,这些文件可以根据需要使用不同的文件夹包 含起来,在*nix 平台上,通过 mmap 系统调用并以流操作的形式+一定的直接的 内存操作来处理缓存数据,数据相当于缓存到了内存中,倒是真正有缓存的含义。</p>

<p>该缓存支持直接把 mailmessage 等结构体的数据存储到缓冲中。</p>

<p>在 windows 平台上,这个库并没有把 mmap 调用替换成 windows 操作系统 对应的机制, Windows 平台下对该缓存应该还没有真正完成。</p>

<h4>IMAP 实现对邮件搜索功能的支持</h4>

<p>Libetpan 对 IMAP 的实现支持按下面定义的数据结构从服务器端对邮件各个 部分的内容进行搜索,但肯定需要服务器端的支持；</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">struct</span> <span class="n">mailimap_search_key</span> <span class="p">{</span>
</span><span class='line'><span class="kt">int</span> <span class="n">sk_type</span><span class="p">;</span>
</span><span class='line'><span class="k">union</span> <span class="p">{</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">sk_bcc</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">mailimap_date</span> <span class="o">*</span> <span class="n">sk_before</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">sk_body</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">sk_cc</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">sk_from</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">sk_keyword</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">mailimap_date</span> <span class="o">*</span> <span class="n">sk_on</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">mailimap_date</span> <span class="o">*</span> <span class="n">sk_since</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">sk_subject</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">sk_text</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">sk_to</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">sk_unkeyword</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="p">{</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">sk_header_name</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">sk_header_value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">sk_header</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">uint32_t</span> <span class="n">sk_larger</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">mailimap_search_key</span> <span class="o">*</span> <span class="n">sk_not</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">mailimap_search_key</span> <span class="o">*</span> <span class="n">sk_or1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">mailimap_search_key</span> <span class="o">*</span> <span class="n">sk_or2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">sk_or</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">mailimap_date</span> <span class="o">*</span> <span class="n">sk_sentbefore</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">mailimap_date</span> <span class="o">*</span> <span class="n">sk_senton</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">mailimap_date</span> <span class="o">*</span> <span class="n">sk_sentsince</span><span class="p">;</span>
</span><span class='line'><span class="n">uint32_t</span> <span class="n">sk_smaller</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">mailimap_set</span> <span class="o">*</span> <span class="n">sk_uid</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">mailimap_set</span> <span class="o">*</span> <span class="n">sk_set</span><span class="p">;</span>
</span><span class='line'><span class="n">clist</span> <span class="o">*</span> <span class="n">sk_multiple</span><span class="p">;</span> <span class="cm">/* list of (struct mailimap_search_key *) */</span>
</span><span class='line'><span class="p">}</span> <span class="n">sk_data</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h4>其它</h4>

<p>libetpan 的一个有意思的地方是以 C 语言实现了一批实用的数据结构,实现了类似相应的 C++模板的效果,使用方便而且编译速度要快很多：</p>

<p><img src="http://iBlock.github.io/images/2014/04/17/Other.png" title="Other" alt="alt text" /></p>

<p>特别是前几个数据结构,在 libetpan、MailCore 里面都大量使用,不管是在 哪一个层次。</p>

<p>libetpan 对上层提供的接口及其作用的说明:</p>

<p><img src="http://iBlock.github.io/images/2014/04/17/Other2.png" title="Other" alt="alt text" /></p>

<h4>总结</h4>

<p>Libetpan 虽然采用 C 开发,但由于它尝试用存储->会话->邮件这样一个统一 的框架并以函数指针的方式来封装获取、解析邮件各部分内容的全过程,所以无 法直接从代码之间的调用关系来了解整个过程,必须从各个层次的封装接口入手 才能连接整个过程。</p>

<p>libetpan 对邮件协议的封装中,最复杂的是 IMAP 部分。这里对 IMAP 的封装 接口以下图进行说明:</p>

<p><img src="http://iBlock.github.io/images/2014/04/17/LibEtPan_IMAP.png" title="LibEtPan_IMAP" alt="alt text" /></p>

<p>感谢原文提供者。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS7.1 企业应用无法安装解决方案]]></title>
    <link href="http://iBlock.github.io/blog/2014/04/04/ios7-dot-1-qi-ye-ying-yong-wu-fa-an-zhuang-jie-jue-fang-an/"/>
    <updated>2014-04-04T15:34:33+08:00</updated>
    <id>http://iBlock.github.io/blog/2014/04/04/ios7-dot-1-qi-ye-ying-yong-wu-fa-an-zhuang-jie-jue-fang-an</id>
    <content type="html"><![CDATA[<p>本文章为转载，主要参考<a href="http://blog.csdn.net/zhaoxy_thu/article/details/21133399">&ldquo;这里&rdquo;</a>。</p>

<p>最近有人反馈说公司网站上发布的IOS应用下载时提示证书错误，无法下载，于是我用我的手机试了下却发现可以正常下载，和有问题的手机比较排查了下发现只要是升级到了IOS7.1系统的iPhone手机都无法下载，之前的都是可以正常下载的，在网上搜了下解决方案，果然是因为这个，简单的说就是ios7.1要安装企业应用，url必须是https的，不能是http，这就要求服务器需要支持https。因此只要将原链接：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>itms-services://?action=download-manifest&amp;url=http://example.com/manifest.plist
</span></code></pre></td></tr></table></div></figure>


<p>改为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>itms-services://?action=download-manifest&amp;url=https://example.com/manifest.plist
</span></code></pre></td></tr></table></div></figure>


<p>即可。</p>

<p>对于服务器，则需要增加对https的支持，下面我就将我搭建的步骤记录一下。</p>

<!--more-->


<h3>一、安装配有SSL模块的apache版本</h3>

<p>本人使用的是<a href="http://mirrors.hust.edu.cn/apache//httpd/binaries/win32/httpd-2.0.65-win32-x86-openssl-0.9.8y.msi">httpd-2.0.65-win32-x86-openssl-0.9.8y.msi</a>
点击上面链接下载安装，安装过程较为简单，在这里就不做说明了。</p>

<h3>二、修改apache的配置文件</h3>

<p>1、找到apache安装目录下的conf/httpd.conf，打开文件，去掉以下内容前的#号</p>

<figure class='code'><figcaption><span>httpd.conf </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>LoadModule ssl_module modules/mod_ssl.so
</span></code></pre></td></tr></table></div></figure>


<p>并在文件最后加上：</p>

<figure class='code'><figcaption><span>httpd.conf </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&lt;VirtualHost *:8080&gt;
</span><span class='line'>    ServerAdmin xxx@xxx.com（随意）
</span><span class='line'>    DocumentRoot C:/Server（服务器根目录）
</span><span class='line'>    ServerName 192.168.xxx.xxx（服务器域名或ip地址）
</span><span class='line'>    ErrorLog logs/test-error_log
</span><span class='line'>    CustomLog logs/test-access_log common
</span><span class='line'>    SSLEngine on
</span><span class='line'>    SSLCertificateFile &quot;C:/Program Files/Apache Group/Apache2/conf/ssl.crt/server.crt&quot;（之后生成证书的完整路径）
</span><span class='line'>    SSLCertificateKeyFile &quot;C:/Program Files/Apache Group/Apache2/conf/ssl.key/server.key&quot; （之后生成密钥的完整路径）
</span><span class='line'>&lt;/VirtualHost&gt;
</span></code></pre></td></tr></table></div></figure>


<p>2、修改conf/ssl.conf文件的以下内容：（以下为修改完的，可参考）</p>

<figure class='code'><figcaption><span>ssl.conf </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>#SSLSessionCache        none
</span><span class='line'>#SSLSessionCache        shmht:logs/ssl_scache(512000)
</span><span class='line'>SSLSessionCache        shmcb:logs/ssl_scache(512000)
</span><span class='line'>#SSLSessionCache         dbm:logs/ssl_scache
</span><span class='line'>...
</span><span class='line'>SSLCertificateFile conf/ssl.crt/server.crt
</span><span class='line'>...
</span><span class='line'>SSLCertificateKeyFile conf/ssl.key/server.key
</span></code></pre></td></tr></table></div></figure>


<p>3、在conf目录下创建ssl.crt和ssl.key目录（不创建也行，只要保证以上两个路径和之后的文件路径对应即可）</p>

<h3>三、在命令行下切换到apache目录下的bin目录，运行以下命令</h3>

<p>1、生成服务器的私钥</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>openssl genrsa -out server.key 1024
</span></code></pre></td></tr></table></div></figure>


<p>以上命令会在bin目录下生成server.key文件</p>

<p>2、生成签署申请</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>openssl req -new –out server.csr -key server.key -config ..\conf\openssl.cnf
</span></code></pre></td></tr></table></div></figure>


<p>输入以上命令回车后会开始让你填入相关信息。（注意除Common Name以外可以为空，Common Name必须为服务器的ip或域名）执行完后会在当前目录下生成server.csr文件</p>

<p>3、生成私钥</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>openssl genrsa  -out ca.key 1024
</span></code></pre></td></tr></table></div></figure>


<p>上面命令会在当前目录下生成ca.key文件</p>

<p>4、利用CA的私钥产生CA的自签署证书</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>openssl req  -new -x509 -days 365 -key ca.key -out ca.crt  -config ..\conf\openssl.cnf
</span></code></pre></td></tr></table></div></figure>


<p>输入以上命令回车后会开始让你填入相关信息。（注意除Common Name以外可以为空，Common Name必须为服务器的ip或域名）执行完后会在当前目录下生成ca.crt文件</p>

<p>5、在当前目录创建demoCA，里面创建文件index.txt和serial，serial内容为01，index.txt为空，以及文件夹newcerts</p>

<p>6、CA为网站服务器签署证书</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>openssl ca -in server.csr -out server.crt -cert ca.crt -keyfile ca.key -config ..\conf\openssl.cnf
</span></code></pre></td></tr></table></div></figure>


<p>上面的命令会在当前目录下生成server.crt文件</p>

<p>7、最后将server.crt和server.key复制到上文对应的路径下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>conf/ssl.crt/server.crt
</span><span class='line'>conf/ssl.key/server.key
</span></code></pre></td></tr></table></div></figure>


<p>8、重启Apache服务器，即增加了https的支持。可以在浏览器访问<a href="https://localhost:8080">https://localhost:8080</a>试试。如果不行，可以在logs\test-error_log文件中看看出了什么错误。</p>

<h3>四、将CA证书安装到iPhone上</h3>

<p>最后，我们要将自己创建的CA证书安装到iphone上。将上面生成的ca.crt文件通过以下方式安装到iPhone手机上：</p>

<p>1、邮件方式，用iPhone自带的Mail程序打开（别的邮件客户端不行）</p>

<p>2、将证书放到发布应用的网站上，用safari浏览器打开并安装证书</p>

<p>安装完证书后再次访问我们之前的itms-services链接，就可以正常安装了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS Provisioning Profiles描述文件到期解决方法]]></title>
    <link href="http://iBlock.github.io/blog/2014/04/03/ios-provisioning-profilesmiao-shu-wen-jian-dao-qi-jie-jue-fang-fa/"/>
    <updated>2014-04-03T23:40:19+08:00</updated>
    <id>http://iBlock.github.io/blog/2014/04/03/ios-provisioning-profilesmiao-shu-wen-jian-dao-qi-jie-jue-fang-fa</id>
    <content type="html"><![CDATA[<p>从上周开始，公司陆续有人跟我说发布在公司网站上的IOS应用程序无法下载安装，提示172.16.xx.xxx证书无效，起初我没在意，后来又有人跟我反应说安全应用客户端在iPhone上打开闪退，前两天还能正常使用。这接二连三的异常现象让我不得不开始重视起来，自从公司的安全客户端某个版本发布后一直就没动过了，怎么最近开始出现这种异常问题，而且是有的说是下载不了，有的说是在iphone上打开就闪退，我开始排查问题，到今天为止把问题都解决了，做个记录。本篇文章主要解决客户端在iPhone上闪退的问题。</p>

<!--more-->


<p>经过问题排查最后发现闪退现象是因为Provisioning Profiles描述文件到期了，之前打包时使用的Provisioning Profiles文件于2013年3月27日到期，所以3月27日之后用户打开应用由于文件到期导致应用直接闪退。解决这个问题很简单，首先登录苹果开发者网站，找到Provisioning Profiles，因为是打包文件，所以选择Distribution，如下图所示：</p>

<p><img src="http://iBlock.github.io/images/2014/04/04/Provisioning%20Profiles.png" title="Provisioning Profiles" alt="alt text" /></p>

<p>找到之前的描述文件，这个时候只要将之前的描述文件重新生成一下即可，不用重新新建一个描述文件。重新生成之后描述文件的日期将会延后一年，然后将这个描述文件下载到本地，导入到你要打包的机器上，然后重新打一个包，让之前应用打开会闪退的iPhone手机重新安装新打的包即可。仅仅是为了记录一下，避免以后再次出现这种问题又花费时间排查。</p>

<p>至于文章开头说的另一个错误：公司网站上的IOS应用程序无法下载安装，则可参考我的另一篇博客<a href="http://iblock.github.io/blog/2014/04/04/ios7-dot-1-qi-ye-ying-yong-wu-fa-an-zhuang-jie-jue-fang-an/">IOS7.1 企业应用无法安装解决方案</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KVOController类库使用学习]]></title>
    <link href="http://iBlock.github.io/blog/2014/03/17/kvocontrollerlei-ku-shi-yong-xue-xi/"/>
    <updated>2014-03-17T17:29:07+08:00</updated>
    <id>http://iBlock.github.io/blog/2014/03/17/kvocontrollerlei-ku-shi-yong-xue-xi</id>
    <content type="html"><![CDATA[<h2>KVOController类库简介</h2>

<p>KVOController 是一个简单安全的 KVO（Key-value Observing，键-值 观察）工具，用于 iOS 和 OS X 应用开发中，开源自 facebook。</p>

<p>KVO 是一个在 MVC（Model-View-Controller）应用程序开发中，用于不同模块间交流的一个很有用的技术。 KVOController 是基于 Cocoa 久经考验的 Key-value Observing 实现（implementation）开发而成的。它提供了一个简单现代的 API，同时也是线程安全的。它有如下优点：</p>

<ul>
<li>使用 Blocks、自定义 Actions 或者 NSKeyValueObserving 回调进行通知.</li>
<li>观测者移除时无异常</li>
<li>控制器 dealloc 时隐式的观测者移除</li>
<li>提升使用 NSKeyValueObservingInitial 的性能</li>
<li>线程安全并提供在观测者恢复时额外的保护Thread-safety with special guards against observer resurrection – rdar://15985376.
更多关于 KVO 的信息，可浏览 Apple 的文档：<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html">Introduction to Key-Value Observing</a></li>
</ul>


<!--more-->


<h2>Demo功能说明</h2>

<p>假设我要做这么一个东西，有一个界面类，上面有一个UITextField控件，该会时时显示当前的系统时间，而显示的内容将从一个模型类中去获取。简单点就是模型类每隔一秒会获取当前的系统时间，而每一次时间的更新都时时反映到UITextField上。</p>

<h2>不使用KVOController之前</h2>

<p>如下代码所示：
首先新建模型类CurrentTimer，并添加date属性</p>

<figure class='code'><figcaption><span>CurrentTimer.h </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">CurrentTimer</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span><span class="n">NSDate</span> <span class="o">*</span><span class="n">date</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>添加定时器，每秒获取一次当前时间并赋给date属性</p>

<figure class='code'><figcaption><span>CurrentTimer.m </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="cp">#import &quot;CurrentTimer.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">CurrentTimer</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">NSTimer</span> <span class="nl">scheduledTimerWithTimeInterval:</span><span class="mf">1.0</span> <span class="nl">target:</span><span class="n">self</span> <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">changeTimer:</span><span class="p">)</span> <span class="nl">userInfo:</span><span class="nb">nil</span> <span class="nl">repeats:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">changeTimer:</span><span class="p">(</span><span class="n">NSTimer</span> <span class="o">*</span><span class="p">)</span><span class="nv">timer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">date</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDate</span> <span class="n">date</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建视图类对象，添加输出控件UITextField</p>

<figure class='code'><figcaption><span>ViewController.h </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class='line'><span class="cp">#import &quot;CurrentTimer.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> : <span class="nc">UIViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UITextField</span> <span class="o">*</span><span class="n">showDate</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">CurrentTimer</span> <span class="o">*</span><span class="n">timer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>添加观察者，监听模型类CurrentTimer中的date属性，添加响应方法observeValueForKeyPath，每当date属性值发生改变时都会触发该方法</p>

<figure class='code'><figcaption><span>ViewController.m </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">timer</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CurrentTimer</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">timer</span> <span class="nl">addObserver:</span><span class="n">self</span> <span class="nl">forKeyPath:</span><span class="s">@&quot;date&quot;</span> <span class="nl">options:</span><span class="n">NSKeyValueObservingOptionNew</span> <span class="o">|</span> <span class="n">NSKeyValueObservingOptionOld</span> <span class="nl">context:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">observeValueForKeyPath:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">keyPath</span> <span class="nf">ofObject:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">object</span> <span class="nf">change:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">change</span> <span class="nf">context:</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="nv">context</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">keyPath</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;date&quot;</span><span class="p">])</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">change</span><span class="p">[</span><span class="n">NSKeyValueChangeNewKey</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">NSString</span> <span class="o">*</span><span class="n">dateStr</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">change</span><span class="p">[</span><span class="n">NSKeyValueChangeNewKey</span><span class="p">]];</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">showDate</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">dateStr</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">didReceiveMemoryWarning</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">didReceiveMemoryWarning</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// Dispose of any resources that can be recreated.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行将能看到最终效果，上述Demo代码可在<a href="https://github.com/iBlock/KVOTest">这里获取</a></p>

<h2>使用KVOController示例</h2>

<h4>KVOController类库的配置</h4>

<p>我比较习惯使用Cocoapods进行配置，如果不懂Cocoapods是什么的，可参考<a href="http://blog.devtang.com/blog/2012/12/02/use-cocoapod-to-manage-ios-lib-dependency/">这里</a>。</p>

<p>配置好后首先还是一样先新建一个CurrentTimer模型类用来时时获取当前时间，然后新建视图类，主要代码如下：</p>

<figure class='code'><figcaption><span>ViewController.h </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class='line'><span class="cp">#import &quot;CurrentTimer.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> : <span class="nc">UIViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UITextField</span> <span class="o">*</span><span class="n">showDate</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">CurrentTimer</span> <span class="o">*</span><span class="n">timer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>ViewController.m </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'><span class="cp">#import &lt;FBKVOController.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">FBKVOController</span> <span class="o">*</span><span class="n">kvoController</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>    <span class="n">kvoController</span> <span class="o">=</span> <span class="p">[</span><span class="n">FBKVOController</span> <span class="nl">controllerWithObserver:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">timer</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CurrentTimer</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">kvoController</span> <span class="nl">observe:</span><span class="n">self</span><span class="p">.</span><span class="n">timer</span> <span class="nl">keyPath:</span><span class="s">@&quot;date&quot;</span> <span class="nl">options:</span><span class="n">NSKeyValueObservingOptionOld</span> <span class="o">|</span><span class="n">NSKeyValueObservingOptionNew</span> <span class="nl">block:</span><span class="o">^</span><span class="p">(</span><span class="n">ViewController</span> <span class="o">*</span><span class="n">view</span><span class="p">,</span> <span class="n">CurrentTimer</span> <span class="o">*</span><span class="n">timer</span><span class="p">,</span> <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">change</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSString</span> <span class="o">*</span><span class="n">dateStr</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">change</span><span class="p">[</span><span class="n">NSKeyValueChangeNewKey</span><span class="p">]];</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">showDate</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">dateStr</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">didReceiveMemoryWarning</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">didReceiveMemoryWarning</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// Dispose of any resources that can be recreated.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，该类库的使用也异常方便，还支持Block，整体看起来很简洁，具体代码可<a href="https://github.com/iBlock/KVOControllerTest">看这里</a>。</p>

<p>以上就是今天对KVOController类库的学习，记录一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搭建Octopress博客后cocoaPod无法使用问题记录]]></title>
    <link href="http://iBlock.github.io/blog/2014/03/12/da-jian-octopressbo-ke-hou-cocoapodwu-fa-shi-yong-wen-ti-ji-lu/"/>
    <updated>2014-03-12T22:48:51+08:00</updated>
    <id>http://iBlock.github.io/blog/2014/03/12/da-jian-octopressbo-ke-hou-cocoapodwu-fa-shi-yong-wen-ti-ji-lu</id>
    <content type="html"><![CDATA[<p>今天在用pod安装第三方依赖库时发现pod无法使用了，出现类似下面错误：</p>

<blockquote><p>naxiannantekiMacBook-Pro:~ iBlock$ pod search<br/>/Library/Ruby/Site/2.0.0/rubygems/dependency.rb:298:in to_specs&#8217;: Could not find &#8216;cocoapods&#8217; (>= 0) among 48 total gem(s) (Gem::LoadError)<br/>from /Library/Ruby/Site/2.0.0/rubygems/dependency.rb:309:into_spec&#8217;<br/>from /Library/Ruby/Site/2.0.0/rubygems/core_ext/kernel_gem.rb:53:in gem&#8217;<br/>from /usr/bin/pod:22:in</p></blockquote>


<p>看错误应该是ruby版本问题造成的，回想了下之前搭建octopress博客由于需要ruby1.9.3的环境，所以根据要求进行了安装，而cocopod需要的ruby是其它版本，估计是搭建Octopress博客时安装ruby1.9.3不知哪个步骤操作有误导致ruby2.0.0出现了问题，于是开始着手解决问题。</p>

<!--more-->


<p>首先输入下面命令查看ruby版本：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby --version</span></code></pre></td></tr></table></div></figure>


<p>显示如下：</p>

<blockquote><p>ruby 1.9.3p545 (2014-02-24 revision 45159) [x86_64-darwin13.0.0]</p></blockquote>

<p>看看当前系统上已安装的ruby版本列表：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm list</span></code></pre></td></tr></table></div></figure>


<p>得到的结果如下：</p>

<blockquote><p>rvm rubies</p><p>   ruby-1.9.3-p545 [ x86_64 ]<br/>   ruby-2.0.0-p451 [ x86_64 ]<br/>=* ruby-2.1.1 [ x86_64 ]</p><p># => - current<br/># =* - current && default<br/>#  * - default</p></blockquote>


<p>发现ruby2.0.0版本是有的，切换ruby版本：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm use ruby 2.0.0</span></code></pre></td></tr></table></div></figure>


<p>出错，错误码忘了保留了，总之提示ruby2.0.0版本有问题，输入以下命令重装下ruby2.0.0版本：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm reinstall ruby-2.0.0</span></code></pre></td></tr></table></div></figure>


<p>该命令会将之前的ruby2.0.0版本删除重新下载安装。完成后切换到2.0.0版本，尝试使用pod search asiHttpRequest命令，发现还是有问题，差点就想重装下cocoapod，但是看到了cocoapod的升级命令，试试看能否升级修复下，如是输入：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gem install cocoapods</span></code></pre></td></tr></table></div></figure>


<p>命令完成后，再次输入pod search asiHttpRequest，成功了，输出如下内容：</p>

<blockquote><p>-> ASIHTTPRequest (1.8.1)<br/>   Easy to use CFNetwork wrapper for HTTP requests, Objective-C, Mac OS X and<br/>   iPhone.<br/>   pod &#8216;ASIHTTPRequest&#8217;, &#8216;~> 1.8.1&#8217;<br/>   - Homepage: http://allseeing-i.com/ASIHTTPRequest<br/>   - Source:   https://github.com/pokeb/asi-http-request.git<br/>   - Versions: 1.8.1 [master repo]<br/>   - Sub specs:<br/>     - ASIHTTPRequest/Core (1.8.1)<br/>     - ASIHTTPRequest/ASIWebPageRequest (1.8.1)<br/>     - ASIHTTPRequest/CloudFiles (1.8.1)<br/>     - ASIHTTPRequest/S3 (1.8.1)</p></blockquote>


<p>当想使用octopress的rake功能时只要使用如下命令切换ruby版本即可，OK，大功告成，记录一下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm use 1.9.3</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress博客开博]]></title>
    <link href="http://iBlock.github.io/blog/2014/03/10/octopressbo-ke-kai-bo/"/>
    <updated>2014-03-10T22:06:21+08:00</updated>
    <id>http://iBlock.github.io/blog/2014/03/10/octopressbo-ke-kai-bo</id>
    <content type="html"><![CDATA[<p><img src="http://iBlock.github.io/images/2014/03/10/octopress.png" title="octopress" alt="alt text" /></p>

<h2>前言</h2>

<p>octopress弄了好几天终于搭建起来了，主要是一开始在捣鼓各种各样的主题，然后找各种各样的插件，到头来发现我并不需要这些，我仅仅是需要一个能记录我的生活、记录我学习的点滴这么一个平台。为什么会选择Octopress?虽说只是为了写博客，但是我之前试过在其它的平台比如：博客园、CSDN等尝试写博客，但是效果很不理想，无论是外观样式还是排版都不怎么满意。我一直在看<a href="http://blog.devtang.com/" title="唐巧">唐巧</a>和<a href="http://onevcat.com/" title="上善若水">OneV&rsquo;s Den</a>写的技术博客，发现这样的博客正是我想要的样子，马上一通Google，最终才找到了octopress，下面我将把我搭建该博客的步骤记录下来。</p>

<!--more-->


<h2>安装步骤</h2>

<ul>
<li><h4>安装RVM，RVM(Ruby Version Manager)负责安装和管理Ruby的环境</h4></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -L https://get.rvm.io | bash -s stable --ruby</span></code></pre></td></tr></table></div></figure>


<ul>
<li><h4>安装Ruby 1.9.3</h4></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress           #octopress路径可以根据需要修改
</span><span class='line'>cd octopress      #进入到指定路径下
</span><span class='line'>ruby --version        #应该能正确输出ruby版本号才对</span></code></pre></td></tr></table></div></figure>


<ul>
<li><h4>安装相关依赖项</h4></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install bundler
</span><span class='line'>rbenv rehash
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<ul>
<li><h4>安装默认的Octopress主题，其它主题可参考<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes," title="主题列表">这里</a></h4></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<h2>配置Octopress</h2>

<p>我这里主要是针对默认主题来展开的，其它主题的配置可能不一定适用。</p>

<ul>
<li><h4>首先修改_config.yml文件</h4>

<p>我主要修改以下几项：
<code>title</code>、<code>subtitle</code>、<code>author</code>
，并且删除twitter相关的信息，由于GFW的原因，将会造成页面load很慢。</p></li>
</ul>


<p>关于_config.yml文件中的更多内容，请看<a href="http://octopress.org/">这里</a></p>

<h2>将博客部署到github上</h2>

<ul>
<li><h4>准备工作</h4></li>
</ul>


<p>1.创建<code>github</code>账号</p>

<p>2.在github上<code>创建一个仓库</code>，并将仓库名称按照这样的方式进行命名：<code>username.github.com</code>或<code>organization.github.com</code>，之后我们的博客就可以以<code>http://username.github.com</code>这样的方式来进行访问了。
以上内容如有不明白的可自行Google。</p>

<ul>
<li><h4>根据Octopress的<code>rake</code>命令来自动配置仓库</h4></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>上面的命令主要做的就是创建一个_deploy目录，目录用来存放部署到master分支的内容。期间会要求你输入仓库的url，根据提示，进行输入即可。
完成上面的命令之后，我们就可以生成博客并真正的部署到仓库中了。执行如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>rake deploy       #通过该命令把博客生成的内容提交到master分支下</span></code></pre></td></tr></table></div></figure>


<p>上面的命令首先生成博客文件，并将生成的博客文件拷贝到<code>_deploy/</code>目录下，然后将这些内容添加到git中，并commit和push到仓库的<code>master</code>分支。
现在可以访问<code>http://username.github.com</code>了。注意：有时候可能会有延时，要等几分钟才能打开（我等了10分钟左右）。</p>

<p>在使用rake deploy命令时可能会出现如下错误：</p>

<blockquote><p>Pushing generated _deploy website<br/>To git@github.com:xxx/iblock.github.com.git<br/> ! [rejected]        master -> master (non-fast-forward)<br/>error: failed to push some refs to &#8216;git@github.com:xxx/iblock.github.com.git&#8217;</p></blockquote>


<p>看了很多人的博客搭建上都没有提到这个问题，不知道是否都没遇到，总之我是遇到了，出现这个问题后会发现怎么使用rake deploy这个命令在github的maste分支都没有任何东西，经过Google，最后找到解决方案了，修改<code>rakefile</code>文件里面的system &ldquo;git push origin #{deploy_branch}&#8221;改成system &#8220;git push origin <code>+</code>#{deploy_branch}&#8221;就解决了。</p>

<ul>
<li><h4>将博客的源代码放到source分支下</h4></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add .
</span><span class='line'>$ git commit -m 'Initial source commit'
</span><span class='line'>$ git push origin source</span></code></pre></td></tr></table></div></figure>


<p>如果在部署到仓库之前，需要先预览一下博客，可以在终端输入<code>rake preview</code>命令，然后就能在浏览器中进行本地预览访问了：<code>http://127.0.0.1:4000/</code>或<code>http://localhost:4000/</code>，效果跟仓库中的一样。</p>

<p>完成上面的步骤后已经可以开始写博客了，只不过是页面也太过精简了，下面是用octopress写博客的几个步骤：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake new_post["New Post"]
</span><span class='line'>$ rake generate
</span><span class='line'>$ git add .
</span><span class='line'>$ git commit -am "Some comment here." 
</span><span class='line'>$ git push origin source
</span><span class='line'>$ rake deploy</span></code></pre></td></tr></table></div></figure>


<h2>一些个性化的定制</h2>

<ul>
<li><h4>添加最近发表文章</h4>

<p>修改_config.yml文件，找到<code>default_asides:</code>，添加asides/recent_posts.html</p></li>
<li><h4>添加分类列表，并支持中文分类</h4>

<p>保存以下代码到plugins/category_list.rb：</p></li>
</ul>


<figure class='code'><figcaption><span>category_list.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;stringex&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Jekyll</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">CategoryListTag</span> <span class="o">&lt;</span> <span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Tag</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>      <span class="n">html</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>      <span class="n">categories</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">registers</span><span class="o">[</span><span class="ss">:site</span><span class="o">].</span><span class="n">categories</span><span class="o">.</span><span class="n">keys</span>
</span><span class='line'>      <span class="n">categories</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">category</span><span class="o">|</span>
</span><span class='line'>        <span class="n">posts_in_category</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">registers</span><span class="o">[</span><span class="ss">:site</span><span class="o">].</span><span class="n">categories</span><span class="o">[</span><span class="n">category</span><span class="o">].</span><span class="n">size</span>
</span><span class='line'>        <span class="n">category_dir</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">registers</span><span class="o">[</span><span class="ss">:site</span><span class="o">].</span><span class="n">config</span><span class="o">[</span><span class="s1">&#39;category_dir&#39;</span><span class="o">]</span>
</span><span class='line'>        <span class="c1"># category_url = File.join(category_dir, category.gsub(/_|\P{Word}/u, &#39;-&#39;).gsub(/-{2,}/u, &#39;-&#39;).downcase)</span>
</span><span class='line'>        <span class="n">category_url</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">category_dir</span><span class="p">,</span> <span class="n">category</span><span class="o">.</span><span class="n">to_url</span><span class="p">)</span>
</span><span class='line'>        <span class="n">html</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;&lt;li class=&#39;category&#39;&gt;&lt;a href=&#39;/</span><span class="si">#{</span><span class="n">category_url</span><span class="si">}</span><span class="s2">/&#39;&gt;</span><span class="si">#{</span><span class="n">category</span><span class="si">}</span><span class="s2"> (</span><span class="si">#{</span><span class="n">posts_in_category</span><span class="si">}</span><span class="s2">)&lt;/a&gt;&lt;/li&gt;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">html</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Template</span><span class="o">.</span><span class="n">register_tag</span><span class="p">(</span><span class="s1">&#39;category_list&#39;</span><span class="p">,</span> <span class="ss">Jekyll</span><span class="p">:</span><span class="ss">:CategoryListTag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个插件会向liquid注册一个名为category_list的tag，该tag就是以li的形式将站点所有的category组织起来。如果要将category加入到侧边导航栏，需要增加一个aside。</p>

<p>复制以下代码到source/_includes/asides/category_list.html。</p>

<figure class='code'><figcaption><span>category_list.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;section&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>Categories<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;categories&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    {% category_list %}
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>配置侧边栏需要修改_config.yml文件，修改其default_asides项：
如下代码所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>default_asides: [asides/category_list.html, asides/recent_posts.html]</span></code></pre></td></tr></table></div></figure>


<p>以上asides根据自己的需求调整。</p>

<ul>
<li><h4>添加分享及评论系统</h4></li>
</ul>


<p>分享我用的是<a href="http://www.jiathis.com/">加网</a>。</p>

<p>评论我用的是<a href="http://duoshuo.com/">多说</a>。</p>

<p>首先去<a href="http://iblock.duoshuo.com/">多说网</a>注册个账号，添加<a href="http://duoshuo.com/create-site/">站点</a>，获取站点short_name，但是这个short_name怎么获取我之前费了不少功夫才得知，其实就是申请多说二级域名，然后就能获得short_name了。比如我申请了iblock.duoshuo.com，那么我的short_name就是iblock。
在 <code>source/_layouts/post.html</code>中的disqus代码</p>

<figure class='code'><figcaption><span>post.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% if site.disqus_short_name and page.comments == true %}
</span><span class='line'>  <span class="nt">&lt;section&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>Comments<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;disqus_thread&quot;</span> <span class="na">aria-live=</span><span class="s">&quot;polite&quot;</span><span class="nt">&gt;</span>{% include post/disqus_thread.html %}<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>{% endif %}
</span></code></pre></td></tr></table></div></figure>


<p>下方添加<code>多说评论</code>模块</p>

<figure class='code'><figcaption><span>post.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% if site.duoshuo_short_name and site.duoshuo_comments == true and page.comments == true %}
</span><span class='line'>  <span class="nt">&lt;section&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>Comments<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;comments&quot;</span> <span class="na">aria-live=</span><span class="s">&quot;polite&quot;</span><span class="nt">&gt;</span>{% include post/duoshuo.html %}<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>{% endif %}
</span></code></pre></td></tr></table></div></figure>


<p>然后就按路径创建一个 <code>source/_includes/post/duoshuo.html</code>，添加如下代码：</p>

<figure class='code'><figcaption><span> (duoshuo.html)</span> <a href='http://iBlock.github.io/downloads/code/duoshuo.html'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- JiaThis Button BEGIN --&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;jiathis_style_24x24&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;jiathis_button_qzone&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class='line'>  <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;jiathis_button_tsina&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class='line'>  <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;jiathis_button_tqq&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class='line'>  <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;jiathis_button_weixin&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class='line'>  <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;jiathis_button_renren&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class='line'>  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.jiathis.com/share&quot;</span> <span class="na">class=</span><span class="s">&quot;jiathis jiathis_txt jtico jtico_jiathis&quot;</span> <span class="na">target=</span><span class="s">&quot;_blank&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class='line'>  <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;jiathis_counter_style&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;http://v3.jiathis.com/code/jia.js?uid=1394073450203129&quot;</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="c">&lt;!-- JiaThis Button END --&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- Duoshuo Comment BEGIN --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;ds-thread&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">duoshuoQuery</span> <span class="o">=</span> <span class="p">{</span><span class="nx">short_name</span><span class="o">:</span><span class="s2">&quot;iblock&quot;</span><span class="p">};</span>
</span><span class='line'>  <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">ds</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">ds</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s1">&#39;text/javascript&#39;</span><span class="p">;</span><span class="nx">ds</span><span class="p">.</span><span class="nx">async</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">ds</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">&#39;http://static.duoshuo.com/embed.js&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">ds</span><span class="p">.</span><span class="nx">charset</span> <span class="o">=</span> <span class="s1">&#39;UTF-8&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;head&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>      <span class="o">||</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">ds</span><span class="p">);</span>
</span><span class='line'>  <span class="p">})();</span>
</span><span class='line'>  <span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="c">&lt;!-- Duoshuo Comment END --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意，将上面代码中的short_name:&ldquo;iblock&#8221;更改为你的short_name。</p>

<p>最后修改_config.yml文件，添加</p>

<figure class='code'><figcaption><span>_config.yml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># duoshuo comments</span>
</span><span class='line'><span class="l-Scalar-Plain">duoshuo_comments</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'><span class="l-Scalar-Plain">duoshuo_short_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yourname</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上内容就是我搭建博客过程中的步骤。</p>

<p>主要参考的文章如下：</p>

<p><a href="http://beyondvincent.com/blog/2013/08/03/108-creating-a-github-blog-using-octopress/">http://beyondvincent.com/blog/2013/08/03/108-creating-a-github-blog-using-octopress/</a>
<a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/</a>
<a href="http://biaobiaoqi.me/blog/2013/07/10/decorate-octopress/">http://biaobiaoqi.me/blog/2013/07/10/decorate-octopress/</a></p>
]]></content>
  </entry>
  
</feed>
