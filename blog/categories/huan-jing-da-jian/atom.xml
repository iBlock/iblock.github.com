<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 环境搭建 | iBlock的博客]]></title>
  <link href="http://iBlock.github.io/blog/categories/huan-jing-da-jian/atom.xml" rel="self"/>
  <link href="http://iBlock.github.io/"/>
  <updated>2016-01-23T16:18:21+08:00</updated>
  <id>http://iBlock.github.io/</id>
  <author>
    <name><![CDATA[iBlock]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[React-Native环境搭建]]></title>
    <link href="http://iBlock.github.io/blog/2016/01/18/react-native-huan-jing-da-jian/"/>
    <updated>2016-01-18T21:40:05+08:00</updated>
    <id>http://iBlock.github.io/blog/2016/01/18/react-native-huan-jing-da-jian</id>
    <content type="html"><![CDATA[<p><img src="/images/2016/01/18/ReactNative.png" title="ReactNative" alt="alt text" /></p>

<h2>前言</h2>

<p>最近领导让我们做一个H5与Native交互的方案，他最初的要求其实很简单，只要能在H5调起我们终端的支付功能进行支付就行。我的想法就是基于webView做一个URL拦截处理，与服务端协商好事件类型，如1是支付，2是弹窗，对URL中的类型与参数进行处理即可，当然这种做法比较low，不过可以很快完成需求。然后基于这个需求我搜了下目前网上的一些方案，发现了本文的主题，由facebook开源的React-Native框架，这个框架允许你使用 JavaScript 开发原生的 iOS 应用，同时也支持Android。</p>

<!--more-->


<h2>安装步骤</h2>

<ul>
<li><h3>安装Node版本管理器-> NVM</h3></li>
</ul>


<h4>1、首先进入.git目录下，该目录在/User/当前用户目录下，需要打开隐藏文件权限。如果没有该目录，则先创建该目录</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git init</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>2、从git仓库中clone工程到本地</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone &lt;a href="https://github.com/cnpm/nvm.git">https://github.com/cnpm/nvm.git&lt;/a></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>3、在终端中输入命令nvm，这时会发现提示如下</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-bash: nvm: command not found</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>4、上述的错误是提示nvm命令找不到，可以通过以下命令指定nvm路径</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source ~/.nvm/nvm.sh</span></code></pre></td></tr></table></div></figure></notextile></div>
这时重新在终端输入nvm，会显示一些nvm的命令帮助，证明nvm已经能找到并使用。但是使用这种方式仅在本次生效，也就是说当把终端关闭再次打开时，再输入nvm又会发现命令找不到了。为避免每次都要指明nvm.sh的位置可以为命令终端添加启动配置。打开终端输入以下命令
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>open -e !$</span></code></pre></td></tr></table></div></figure></notextile></div>
将会打开profile文件，添加
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export NVM_DIR=&ldquo;$HOME/.nvm&rdquo;
</span><span class='line'>[ -s &ldquo;$NVM_DIR/nvm.sh&rdquo; ] &amp;&amp; . &ldquo;$NVM_DIR/nvm.sh&rdquo; # This loads nvm</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li><h3>安装Node</h3></li>
</ul>


<h4>1、在终端输入以下命令等待执行完成即可完成Node安装</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nvm install node &amp;&amp; nvm alias default node</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>2、查看下Node是否生效，输入node -v，如果能显示版本号则正常</h4>

<ul>
<li><h3>使用 homebrew 安装 watchman，一个来自Facebook 的观察程序以及类型检查程序：</h3></li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install watchman
</span><span class='line'>brew install flow</span></code></pre></td></tr></table></div></figure></notextile></div>
通过配置 watchman，React 实现了在代码发生变化时，完成相关的重建的功能。就像在使用 Xcode 时，每次保存文件都会进行一次创建。</p>

<ul>
<li><h3>安装 React-Native</h3></li>
</ul>


<p>通过 npm安装即可：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g react-native-cli</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li><h3>初始化一个ReactNative的项目</h3></li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>react-native init myFirstReactNativeProject</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li><h3>运行ReactNative项目</h3></li>
</ul>


<h4>1、cd myFirstReactNativeProject</h4>

<h4>2、用xcode打开myFirstReactNativeProject.xcodeproj并点击Run按钮</h4>

<h4>3、用你喜欢的文本编辑器打开index.ios.js并随便改上几行</h4>

<h4>4、在iOS Emulator中按下⌘-R就可以刷新APP并看到你的最新修改</h4>

<p>恭喜！现在你已经成功运行并修改了你的第一个React Native应用！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress使用过程中出现的问题]]></title>
    <link href="http://iBlock.github.io/blog/2014/10/08/octopressshi-yong-guo-cheng-zhong-chu-xian-de-wen-ti/"/>
    <updated>2014-10-08T22:34:04+08:00</updated>
    <id>http://iBlock.github.io/blog/2014/10/08/octopressshi-yong-guo-cheng-zhong-chu-xian-de-wen-ti</id>
    <content type="html"><![CDATA[<p>好久没写博客了，想要记录一下最近学习的一些东西，熟练的进到octopress目录下敲入rake preview，直接就报错了，根据错误提示重新bundle update一下就好了。再次敲入rake preview命令，命令没有报错，然后我在safari中输入 <a href="http://127.0.0.1:4000/">http://127.0.0.1:4000/</a> 进行查看，又出现一个麻烦事，整个页面显示空白，不知什么原因，只能请教google大神了，好在查找的第一条记录就找到问题的解决方案了，找到octopress目录下的Gemfile文件，在最后加上</p>

<pre><code>gem 'thin'
</code></pre>

<p>保存文件，在命令行输入bundle update，再次打开地址发现一切正常了，可以开始写博客了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS7.1 企业应用无法安装解决方案]]></title>
    <link href="http://iBlock.github.io/blog/2014/04/04/ios7-dot-1-qi-ye-ying-yong-wu-fa-an-zhuang-jie-jue-fang-an/"/>
    <updated>2014-04-04T15:34:33+08:00</updated>
    <id>http://iBlock.github.io/blog/2014/04/04/ios7-dot-1-qi-ye-ying-yong-wu-fa-an-zhuang-jie-jue-fang-an</id>
    <content type="html"><![CDATA[<p>本文章为转载，主要参考<a href="http://blog.csdn.net/zhaoxy_thu/article/details/21133399">&ldquo;这里&rdquo;</a>。</p>

<p>最近有人反馈说公司网站上发布的IOS应用下载时提示证书错误，无法下载，于是我用我的手机试了下却发现可以正常下载，和有问题的手机比较排查了下发现只要是升级到了IOS7.1系统的iPhone手机都无法下载，之前的都是可以正常下载的，在网上搜了下解决方案，果然是因为这个，简单的说就是ios7.1要安装企业应用，url必须是https的，不能是http，这就要求服务器需要支持https。因此只要将原链接：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>itms-services://?action=download-manifest&amp;amp;url=&lt;a href=&quot;http://example.com/manifest.plist&quot;&gt;http://example.com/manifest.plist&lt;/a&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
改为：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>itms-services://?action=download-manifest&amp;amp;url=&lt;a href=&quot;https://example.com/manifest.plist&quot;&gt;https://example.com/manifest.plist&lt;/a&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
即可。</p>

<p>对于服务器，则需要增加对https的支持，下面我就将我搭建的步骤记录一下。</p>

<!--more-->


<h3>一、安装配有SSL模块的apache版本</h3>

<p>本人使用的是<a href="http://mirrors.hust.edu.cn/apache//httpd/binaries/win32/httpd-2.0.65-win32-x86-openssl-0.9.8y.msi">httpd-2.0.65-win32-x86-openssl-0.9.8y.msi</a>
点击上面链接下载安装，安装过程较为简单，在这里就不做说明了。</p>

<h3>二、修改apache的配置文件</h3>

<p>1、找到apache安装目录下的conf/httpd.conf，打开文件，去掉以下内容前的#号
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>httpd.conf </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>LoadModule ssl_module modules/mod_ssl.so
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>并在文件最后加上：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>httpd.conf </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&lt;VirtualHost *:8080&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;ServerAdmin xxx@xxx.com（随意）
</span><span class='line'>DocumentRoot C:/Server（服务器根目录）
</span><span class='line'>ServerName 192.168.xxx.xxx（服务器域名或ip地址）
</span><span class='line'>ErrorLog logs/test-error_log
</span><span class='line'>CustomLog logs/test-access_log common
</span><span class='line'>SSLEngine on
</span><span class='line'>SSLCertificateFile &quot;C:/Program Files/Apache Group/Apache2/conf/ssl.crt/server.crt&quot;（之后生成证书的完整路径）
</span><span class='line'>SSLCertificateKeyFile &quot;C:/Program Files/Apache Group/Apache2/conf/ssl.key/server.key&quot; （之后生成密钥的完整路径）
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;/VirtualHost&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>2、修改conf/ssl.conf文件的以下内容：（以下为修改完的，可参考）</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ssl.conf </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;SSLSessionCache        none&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;SSLSessionCache        shmht:logs/ssl_scache(512000)&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;SSLSessionCache        shmcb:logs/ssl_scache(512000)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;SSLSessionCache         dbm:logs/ssl_scache&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&amp;hellip;
</span><span class='line'>SSLCertificateFile conf/ssl.crt/server.crt
</span><span class='line'>&amp;hellip;
</span><span class='line'>SSLCertificateKeyFile conf/ssl.key/server.key
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>3、在conf目录下创建ssl.crt和ssl.key目录（不创建也行，只要保证以上两个路径和之后的文件路径对应即可）</p>

<h3>三、在命令行下切换到apache目录下的bin目录，运行以下命令</h3>

<p>1、生成服务器的私钥
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>openssl genrsa -out server.key 1024
</span></code></pre></td></tr></table></div></figure></notextile></div>
以上命令会在bin目录下生成server.key文件</p>

<p>2、生成签署申请
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>openssl req -new –out server.csr -key server.key -config ..\conf\openssl.cnf
</span></code></pre></td></tr></table></div></figure></notextile></div>
输入以上命令回车后会开始让你填入相关信息。（注意除Common Name以外可以为空，Common Name必须为服务器的ip或域名）执行完后会在当前目录下生成server.csr文件</p>

<p>3、生成私钥
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>openssl genrsa  -out ca.key 1024
</span></code></pre></td></tr></table></div></figure></notextile></div>
上面命令会在当前目录下生成ca.key文件</p>

<p>4、利用CA的私钥产生CA的自签署证书
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>openssl req  -new -x509 -days 365 -key ca.key -out ca.crt  -config ..\conf\openssl.cnf
</span></code></pre></td></tr></table></div></figure></notextile></div>
输入以上命令回车后会开始让你填入相关信息。（注意除Common Name以外可以为空，Common Name必须为服务器的ip或域名）执行完后会在当前目录下生成ca.crt文件</p>

<p>5、在当前目录创建demoCA，里面创建文件index.txt和serial，serial内容为01，index.txt为空，以及文件夹newcerts</p>

<p>6、CA为网站服务器签署证书
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>openssl ca -in server.csr -out server.crt -cert ca.crt -keyfile ca.key -config ..\conf\openssl.cnf
</span></code></pre></td></tr></table></div></figure></notextile></div>
上面的命令会在当前目录下生成server.crt文件</p>

<p>7、最后将server.crt和server.key复制到上文对应的路径下
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>conf/ssl.crt/server.crt
</span><span class='line'>conf/ssl.key/server.key
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>8、重启Apache服务器，即增加了https的支持。可以在浏览器访问<a href="https://localhost:8080">https://localhost:8080</a>试试。如果不行，可以在logs\test-error_log文件中看看出了什么错误。</p>

<h3>四、将CA证书安装到iPhone上</h3>

<p>最后，我们要将自己创建的CA证书安装到iphone上。将上面生成的ca.crt文件通过以下方式安装到iPhone手机上：</p>

<p>1、邮件方式，用iPhone自带的Mail程序打开（别的邮件客户端不行）</p>

<p>2、将证书放到发布应用的网站上，用safari浏览器打开并安装证书</p>

<p>安装完证书后再次访问我们之前的itms-services链接，就可以正常安装了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS Provisioning Profiles描述文件到期解决方法]]></title>
    <link href="http://iBlock.github.io/blog/2014/04/03/ios-provisioning-profilesmiao-shu-wen-jian-dao-qi-jie-jue-fang-fa/"/>
    <updated>2014-04-03T23:40:19+08:00</updated>
    <id>http://iBlock.github.io/blog/2014/04/03/ios-provisioning-profilesmiao-shu-wen-jian-dao-qi-jie-jue-fang-fa</id>
    <content type="html"><![CDATA[<p>从上周开始，公司陆续有人跟我说发布在公司网站上的IOS应用程序无法下载安装，提示172.16.xx.xxx证书无效，起初我没在意，后来又有人跟我反应说安全应用客户端在iPhone上打开闪退，前两天还能正常使用。这接二连三的异常现象让我不得不开始重视起来，自从公司的安全客户端某个版本发布后一直就没动过了，怎么最近开始出现这种异常问题，而且是有的说是下载不了，有的说是在iphone上打开就闪退，我开始排查问题，到今天为止把问题都解决了，做个记录。本篇文章主要解决客户端在iPhone上闪退的问题。</p>

<!--more-->


<p>经过问题排查最后发现闪退现象是因为Provisioning Profiles描述文件到期了，之前打包时使用的Provisioning Profiles文件于2013年3月27日到期，所以3月27日之后用户打开应用由于文件到期导致应用直接闪退。解决这个问题很简单，首先登录苹果开发者网站，找到Provisioning Profiles，因为是打包文件，所以选择Distribution，如下图所示：</p>

<p><img src="/images/2014/04/04/Provisioning%20Profiles.png" title="Provisioning Profiles" alt="alt text" /></p>

<p>找到之前的描述文件，这个时候只要将之前的描述文件重新生成一下即可，不用重新新建一个描述文件。重新生成之后描述文件的日期将会延后一年，然后将这个描述文件下载到本地，导入到你要打包的机器上，然后重新打一个包，让之前应用打开会闪退的iPhone手机重新安装新打的包即可。仅仅是为了记录一下，避免以后再次出现这种问题又花费时间排查。</p>

<p>至于文章开头说的另一个错误：公司网站上的IOS应用程序无法下载安装，则可参考我的另一篇博客<a href="http://iblock.github.io/blog/2014/04/04/ios7-dot-1-qi-ye-ying-yong-wu-fa-an-zhuang-jie-jue-fang-an/">IOS7.1 企业应用无法安装解决方案</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搭建Octopress博客后cocoaPod无法使用问题记录]]></title>
    <link href="http://iBlock.github.io/blog/2014/03/12/da-jian-octopressbo-ke-hou-cocoapodwu-fa-shi-yong-wen-ti-ji-lu/"/>
    <updated>2014-03-12T22:48:51+08:00</updated>
    <id>http://iBlock.github.io/blog/2014/03/12/da-jian-octopressbo-ke-hou-cocoapodwu-fa-shi-yong-wen-ti-ji-lu</id>
    <content type="html"><![CDATA[<p>今天在用pod安装第三方依赖库时发现pod无法使用了，出现类似下面错误：</p>

<p><blockquote><p>naxiannantekiMacBook-Pro:~ iBlock$ pod search<br/>/Library/Ruby/Site/2.0.0/rubygems/dependency.rb:298:in to_specs': Could not find &lsquo;cocoapods&rsquo; (>= 0) among 48 total gem(s) (Gem::LoadError)<br/>from /Library/Ruby/Site/2.0.0/rubygems/dependency.rb:309:into_spec'<br/>from /Library/Ruby/Site/2.0.0/rubygems/core_ext/kernel_gem.rb:53:in gem'<br/>from /usr/bin/pod:22:in</p></blockquote></p>

<p>看错误应该是ruby版本问题造成的，回想了下之前搭建octopress博客由于需要ruby1.9.3的环境，所以根据要求进行了安装，而cocopod需要的ruby是其它版本，估计是搭建Octopress博客时安装ruby1.9.3不知哪个步骤操作有误导致ruby2.0.0出现了问题，于是开始着手解决问题。</p>

<!--more-->


<p>首先输入下面命令查看ruby版本：</p>

<p><code>
ruby --version
</code>
显示如下：</p>

<blockquote><p>ruby 1.9.3p545 (2014-02-24 revision 45159) [x86_64-darwin13.0.0]</p></blockquote>

<p>看看当前系统上已安装的ruby版本列表：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm list</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>得到的结果如下：</p>

<p><blockquote><p>rvm rubies</p></p><p><p>   ruby-1.9.3-p545 [ x86_64 ]<br/>   ruby-2.0.0-p451 [ x86_64 ]<br/>=* ruby-2.1.1 [ x86_64 ]</p></p><p><h1>=> &ndash; current</h1></p><p><h1>=* &ndash; current &amp;&amp; default</h1></p><p><h1>* &ndash; default</h1></p><p><p></p></blockquote></p>

<p>发现ruby2.0.0版本是有的，切换ruby版本：</p>

<p><code>
rvm use ruby 2.0.0
</code></p>

<p>出错，错误码忘了保留了，总之提示ruby2.0.0版本有问题，输入以下命令重装下ruby2.0.0版本：</p>

<p><code>
rvm reinstall ruby-2.0.0
</code></p>

<p>该命令会将之前的ruby2.0.0版本删除重新下载安装。完成后切换到2.0.0版本，尝试使用pod search asiHttpRequest命令，发现还是有问题，差点就想重装下cocoapod，但是看到了cocoapod的升级命令，试试看能否升级修复下，如是输入：</p>

<p><code>
sudo gem install cocoapods
</code></p>

<p>命令完成后，再次输入pod search asiHttpRequest，成功了，输出如下内容：</p>

<p><blockquote><p>&ndash;> ASIHTTPRequest (1.8.1)<br/>   Easy to use CFNetwork wrapper for HTTP requests, Objective-C, Mac OS X and<br/>   iPhone.<br/>   pod &lsquo;ASIHTTPRequest&rsquo;, &lsquo;~> 1.8.1&rsquo;<br/>   &ndash; Homepage: <a href="http://allseeing-i.com/ASIHTTPRequest">http://allseeing-i.com/ASIHTTPRequest</a><br/>   &ndash; Source:   <a href="https://github.com/pokeb/asi-http-request.git">https://github.com/pokeb/asi-http-request.git</a><br/>   &ndash; Versions: 1.8.1 [master repo]<br/>   &ndash; Sub specs:</p></p><p><pre><code> - ASIHTTPRequest/Core (1.8.1)<br/> - ASIHTTPRequest/ASIWebPageRequest (1.8.1)<br/> - ASIHTTPRequest/CloudFiles (1.8.1)<br/> - ASIHTTPRequest/S3 (1.8.1)<br/></code></pre></p><p><p></p></blockquote></p>

<p>当想使用octopress的rake功能时只要使用如下命令切换ruby版本即可，OK，大功告成，记录一下。</p>

<p><code>
rvm use 1.9.3
</code></p>
]]></content>
  </entry>
  
</feed>
